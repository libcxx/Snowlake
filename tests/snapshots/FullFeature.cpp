/**
 * Auto-generated by Snowlake compiler (version 0.1.1).
 */

/**
 * This file was synthesized from /home/x/workspace/Snowlake/tests/./fixtures/full_feature.sl
 */

#include "FullFeature.h"
#include "InferenceErrorDefn.h"

/**
 * This method was synthesized from the "MethodStaticDispatch" inference definition.
 */
TypeCls
FullFeature::MethodStaticDispatch(const ASTExpr& StaticMethodCallStmt, std::error_code* err)
{
    // This corresponds to the 1st premise rule in the inference definition.
    std::vector<TypeCls> ArgumentsTypes = proveType(StaticMethodCallStmt.argument_types);

    // This corresponds to the 2nd premise rule in the inference definition.
    std::vector<TypeCls> ParameterTypes = proveType(StaticMethodCallStmt.callee.parameter_types);

    for (size_t i = 0, size_t j = 1; i < ParameterTypes.size(); ++i, ++j) {
        if (!cmpType(ArgumentsTypes[i], ParameterTypes[j], std::less_equal<TypeCls>())) {
            *err = std::error_code(0, inference_error_category);
            return TypeCls();
        }
    }

    if (!cmpType(ArgumentsTypes, SELF_TYPE, std::not_equal_to<TypeCls>())) {
        *err = std::error_code(0, inference_error_category);
        return TypeCls();
    }
    // This corresponds to the 3rd premise rule in the inference definition.

    // Type annotation setup.
    typeAnnotationSetup(StaticMethodCallStmt.caller_type, CLS_TYPE);

    for (size_t i = 1, size_t j = 1; i < ParameterTypes.size(); ++i, ++j) {
        if (!cmpType(ArgumentsTypes[i], ParameterTypes[j], std::less_equal<TypeCls>())) {
            *err = std::error_code(0, inference_error_category);
            return TypeCls();
        }
    }

    // This corresponds to the 3rd premise rule in the inference definition.
    TypeCls var0 = getBaseType();
    TypeCls var1 = proveType(StaticMethodCallStmt.return_caller_type);
    if (!cmpType(var0, var1, std::equal_to<>())) {
        *err = std::error_code(0, inference_error_category);
        return TypeCls();
    }

    // Type annotation teardown.
    typeAnnotationTeardown(StaticMethodCallStmt.caller_type, CLS_TYPE);

    // This corresponds to the 5th premise rule in the inference definition.
    TypeCls var2 = getBaseType();
    TypeCls var3 = proveType(StaticMethodCallStmt.caller_type);
    if (!cmpType(var2, var3, std::equal_to<>())) {
        *err = std::error_code(0, inference_error_category);
        return TypeCls();
    }

    // This corresponds to the 6th premise rule in the inference definition.
    TypeCls returnType = proveType(StaticMethodCallStmt.return_type);

    return baseType(returnType);
}

/**
 * This method was synthesized from the "BinaryExpressionInference" inference definition.
 */
TypeCls
FullFeature::BinaryExpressionInference(const Expr& expr, std::error_code* err)
{
    // This corresponds to the 1st premise rule in the inference definition.
    TypeCls Expr = proveType(expr.lhs);

    // This corresponds to the 2nd premise rule in the inference definition.
    TypeCls Expr = proveType(expr.rhs);

    return Expr;
}
